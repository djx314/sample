// scala code override def requires: Plugins = org.portablescala.sbtplatformdeps.PlatformDepsPlugin

import org.portablescala.sbtplatformdeps.PlatformDepsPlugin.autoImport._
import scala.collection.compat._

// start autoImport
object versions {
    val scalaCollectionCompat = "2.8.1"
    val kindProjector = "0.13.2"
    val zio = "2.0.2"
    val commonsIO = "1.3.2"
    val shapeless2 = "2.3.3"
}
val scalaCollectionCompat = settingKey[ModuleID]("lib for scalaCollectionCompat.")
val kindProjector = settingKey[Seq[ModuleID]]("lib for kindProjector.")
val zio = settingKey[Seq[ModuleID]]("lib for zio.")
val commonsIO = settingKey[ModuleID]("lib for commonIO.")

val enableZIOTest = settingKey[Boolean]("enable zio test.")
// end autoImport

// start setting
scalaCollectionCompat := "org.scala-lang.modules" %%% "scala-collection-compat" % versions.scalaCollectionCompat
// end setting

// start setting
enableZIOTest := false
// end setting

// start setting
kindProjector := {
  val need = CrossVersion.partialVersion(scalaVersion.value).filter(_._1 == 2L).to(Seq)
  val dept = "org.typelevel" % "kind-projector" % versions.kindProjector cross CrossVersion.full
  for (_ <- need) yield dept
}
// end setting

// start setting
commonsIO := "org.apache.commons" % "commons-io" % versions.commonsIO
// end setting

// start setting
zio := Seq(
  "dev.zio" %%% "zio-test" % versions.zio,
  "dev.zio" %%% "zio-test-sbt" % versions.zio
)
// end setting

// start setting
zio ++= {
  val need = CrossVersion.partialVersion(scalaVersion.value).filter(s => s._1 == 2L && s._2 > 11L).to(Seq)
  val dept = "dev.zio" %%% "zio-test-magnolia" % versions.zio
  for (_ <- need) yield dept
}
// end setting

// start setting
testFrameworks ++= {
    if (enableZIOTest.value) Seq(new TestFramework("zio.test.sbt.ZTestFramework")) else Seq.empty
}
// end setting

// start setting
libraryDependencies ++= {
    if (enableZIOTest.value) for (t <- zio.value) yield t % Test else Seq.empty
}
// end setting

// start setting
libraryDependencies ++= kindProjector.value.map(compilerPlugin)
// end setting

// start setting
libraryDependencies += scalaCollectionCompat.value
// end setting

// scala code override lazy val projectSettings: Seq[Setting[_]] = preSettings