// scala code override def requires: Plugins = org.portablescala.sbtplatformdeps.PlatformDepsPlugin

import org.portablescala.sbtplatformdeps.PlatformDepsPlugin.autoImport._
import scala.collection.compat._

// start autoImport
object versions {
    val `scala-collection-compat` = "2.8.1"
    val `kind-projector` = "0.13.2"
    val zio = "2.0.2"
    val `commons-io` = "1.3.2"
    val http4s = "0.23.16"
    val `cats-effect` = "3.4.2"
    val cats = "2.9.0"
    val h2 = "2.1.214"
    val doobie = "1.0.0-RC1"
}
val `scala-collection-compat` = settingKey[ModuleID]("lib for scala-collection-compat.")
val `kind-projector` = settingKey[Seq[ModuleID]]("lib for kind-projector.")
val http4s = settingKey[Seq[ModuleID]]("lib for http4s.")
val `cats-effect` = settingKey[Seq[ModuleID]]("lib for cats-effect.")
val cats = settingKey[Seq[ModuleID]]("lib for cats.")
val zio = settingKey[Seq[ModuleID]]("lib for zio.")
val `commons-io` = settingKey[ModuleID]("lib for commons-io.")
val h2 = settingKey[Seq[ModuleID]]("lib for h2.")
val doobie = settingKey[Seq[ModuleID]]("lib for doobie.")

val enableZIOTest = settingKey[Boolean]("enable zio test.")
// end autoImport

// start setting
`scala-collection-compat` := "org.scala-lang.modules" %%% "scala-collection-compat" % versions.`scala-collection-compat`
// end setting

// start setting
enableZIOTest := false
// end setting

// start setting
`kind-projector` := {
  val need = CrossVersion.partialVersion(scalaVersion.value).filter(_._1 == 2L).to(Seq)
  val dept = "org.typelevel" % "kind-projector" % versions.`kind-projector` cross CrossVersion.full
  for (_ <- need) yield compilerPlugin(dept)
}
// end setting

// start setting
`commons-io` := "org.apache.commons" % "commons-io" % versions.`commons-io`
// end setting

// start setting
zio := Seq(
  "dev.zio" %%% "zio-test" % versions.zio,
  "dev.zio" %%% "zio-test-sbt" % versions.zio
)
// end setting

// start setting
zio ++= {
  val need = CrossVersion.partialVersion(scalaVersion.value).filter(s => s._1 == 2L && s._2 > 11L).to(Seq)
  val dept = "dev.zio" %%% "zio-test-magnolia" % versions.zio
  for (_ <- need) yield dept
}
// end setting

// start setting
testFrameworks ++= {
    if (enableZIOTest.value) Seq(new TestFramework("zio.test.sbt.ZTestFramework")) else Seq.empty
}
// end setting

// start setting
libraryDependencies ++= {
    if (enableZIOTest.value) for (t <- zio.value) yield t % Test else Seq.empty
}
// end setting

// start setting
http4s := Seq(
  "org.http4s" %%% "http4s-dsl" % versions.http4s,
  "org.http4s" %%% "http4s-ember-server" % versions.http4s,
  "org.http4s" %%% "http4s-ember-client" % versions.http4s
)
// end setting

// start setting
`cats-effect` := Seq("org.typelevel" %%% "cats-effect" % versions.`cats-effect`)
// end setting

// start setting
cats := Seq("org.typelevel" %%% "cats-core" % versions.cats)
// end setting

// start setting
h2 := Seq("com.h2database" % "h2" % versions.h2)
// end setting

// start setting
doobie := Seq(

  // Start with this one
  "org.tpolecat" %% "doobie-core"      % versions.doobie,

  // And add any of these as needed
  // "org.tpolecat" %% "doobie-h2"     % versions.doobie,          // H2 driver 1.4.200 + type mappings.
  "org.tpolecat" %% "doobie-hikari"    % versions.doobie,          // HikariCP transactor.
  "org.tpolecat" %% "doobie-postgres"  % versions.doobie,          // Postgres driver 42.3.1 + type mappings.
  "org.tpolecat" %% "doobie-scalatest" % versions.doobie % Test  // ScalaTest support for typechecking statements.

)
// end setting

// scala code override lazy val projectSettings: Seq[Setting[_]] = preSettings