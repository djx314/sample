@()
package net.scalax.simple
package adt
package impl

import temp._
import Adt.{Status => ADTStatus}
import net.scalax.simple.ghdmzsk.ghdmzsk
import net.scalax.simple.adt.{RuntimeNat, RuntimeData, RuntimeZero}
import builder.{coproducter, producter_build, DataTaker}

@ADT22Parameter(min: Int, max: Int) = {
    @if(min < max) { RuntimeData[I@{min + 1}, @ADT22Parameter(min + 1, max)] } else { RuntimeNat }
}

@TypeParameters22(i: Int) = { @for(u <- 1 to i) { @if(u > 1) { , } I@{u} } }

trait TypeAdtAliasModelUnapply {
    @for(i <- 1 to 22) {
        object CoProduct@{i} {
            def unapply[@TypeParameters22(i), S <: ADTStatus](data: ADTData[@ADT22Parameter(0, i), S]): Option[I@{i}] = {
                val dataInstance: ghdmzsk = impl.TypeAdtAliasModelUnapplyGhdmzsk.options@{i + 1}GHDMZSK.inputGHDMZSK(() => data.toGHDMZSK)

                dataInstance match {
                  case dt: DataTaker => Some(dt.data.asInstanceOf[I@{i}])
                  case _ => None
                }
            }
        }
    }
}

package impl {
    object TypeAdtAliasModelUnapplyGhdmzsk {
        val options1GHDMZSK: ghdmzsk = coproducter.failedOrOnlyTaker
        @for(i <- 2 to 25) {
            val options@{i}GHDMZSK: ghdmzsk = coproducter.appender.inputGHDMZSK(() => options@{i - 1}GHDMZSK)
        }
    }
}