@()
package net.scalax.simple
package adt
package impl

import implemention.ADTGHDMZSK
import temp._
import Adt.{Status => ADTStatus}
import net.scalax.simple.ghdmzsk.ghdmzsk

@ADT22Parameter(min: Int, max: Int) = {
    @if(min < max) { AdtNatPositive[I@{min}, @ADT22Parameter(min + 1, max)] } else { AdtNatPositive[I@{max}, AdtNat] }
}

@TypeParameters22(i: Int) = { @for(u <- 1 to i) { @if(u > 1) { , } I@{u} } }

trait TypeAdtAliasModelUnapply {
    @for(i <- 1 to 22) {
        object Option@{i} {
            def unapply[@TypeParameters22(i), S <: ADTStatus](data: ADTData[@ADT22Parameter(1, i), S]): Option[I@{i}] = {
                val dataInstance: ghdmzsk = data.toGHDMZSK.inputGHDMZSK(ADTGHDMZSK.TakePropertyUtils.cutADTListByIndex)
                val model: ghdmzsk = dataInstance.inputGHDMZSK(impl.TypeAdtAliasModelUnapplyGhdmzsk.options@{i}GHDMZSK)
                model match {
                    case u: ADTGHDMZSK.GetValue => Some(u.value.asInstanceOf[I@{i}])
                    case _ => Option.empty
                }
            }
        }
    }
}

package impl {
    object TypeAdtAliasModelUnapplyGhdmzsk {
        val options1GHDMZSK: ghdmzsk = ADTGHDMZSK.zeroPositive
        @for(i <- 2 to 22) {
            val options@{i}GHDMZSK: ghdmzsk = ADTGHDMZSK.tempPositive.inputGHDMZSK(options@{i - 1}GHDMZSK)
        }
    }
}