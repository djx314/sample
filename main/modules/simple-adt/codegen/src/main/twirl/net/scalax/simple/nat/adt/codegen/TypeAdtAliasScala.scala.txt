@()
package net.scalax.simple
package adt
package impl

import implemention._
import temp._
import temp.{Status => ADTStatus}

@ADT22Parameter(i: Int) = {
    @if(i > 0) { AdtNatData[I@{i}, @ADT22Parameter(i - 1)] } else { AdtNatZero }
}

@TypeParameter22(i: Int) = {
    @for(i <- 1 to i) { @if(i > 1) { , } I@{i} }
}

trait TypeAdtAlias {
    @for(i <- 1 to 22) {
        type Options@{i}[A, @TypeParameter22(i)] = TypeAdtApply[A, @ADT22Parameter(i), ADTStatus.Passed]
        type OptionsX@{i}[A, Status <: ADTStatus.Passed, @TypeParameter22(i)] = TypeAdtApply[A, @ADT22Parameter(i), Status]
    }
}

object TypeAdtAlias extends TypeAdtAlias with TypeAdtAliasModel with TypeAdtAliasModelUnapply