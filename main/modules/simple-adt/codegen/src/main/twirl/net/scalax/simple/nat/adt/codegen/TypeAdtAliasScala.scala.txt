@()
package net.scalax.simple
package adt
package impl

import implemention._
import temp._
import temp.{Status => ADTStatus}

@ADT22Parameter(min: Int, max: Int) = {
    @if(min < max) { AdtNatData[I@{min}, @ADT22Parameter(min + 1, max)] } else { AdtNatZero }
}

@TypeParameter22(i: Int) = {
    @for(i <- 1 to i) { @if(i > 1) { , } I@{i} }
}

trait TypeAdtAlias {
    @for(i <- 1 to 22) {
        type Options@{i}[A, @TypeParameter22(i)] = TypeAdtApply[A, @ADT22Parameter(1, i + 1), ADTStatus.Passed]
        type OptionsX@{i}[A, ST <: ADTStatus, @TypeParameter22(i)] = TypeAdtApply[A, @ADT22Parameter(1, i + 1), ST]
    }
}

object TypeAdtAlias extends TypeAdtAlias with TypeAdtAliasModel with TypeAdtAliasModelUnapply