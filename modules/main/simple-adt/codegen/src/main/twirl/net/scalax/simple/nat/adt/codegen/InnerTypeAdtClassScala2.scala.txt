@()
package net.scalax.simple.nat.adt
package impl

@paramType(start: Int, i1: Int) = { @for(i2 <- start to i1) { @if(i2 > start){ , } I@{i2} } }
@paramFunc(start: Int, i1: Int) = { @for(i2 <- start to i1) { @if(i2 > start){ , } func@{i2}: I@{i2} => T } }
@paramTypeAny(start: Int, i1: Int) = { @for(i2 <- start to i1) { @if(i2 > start){ , } Any } }

@forMatch(start: Int, i1: Int) = { @for(i2 <- start to i1) { case @{i1 - i2 + 1} => func@{i2}(value.asInstanceOf[I@{i2}]) } }

object InnerTypeAdtClass {
    @for(i1 <- 2 to 22) {
        class CusInnerApply@{i1}[@paramType(1, i1)](index: Int, value: Any) {
            @@inline def fold[T](@paramFunc(1, i1)): T = index match {
                @forMatch(1, i1)
            }
        }
        object HelperIOImpl@{i1} extends HelperIO[Any] {
            override type Out = CusInnerApply@{i1}[@paramTypeAny(1, i1)]
            @@inline override def helper(index: Int, value: Any): CusInnerApply@{i1}[@paramTypeAny(1, i1)] = new CusInnerApply@{i1}(index, value)
        }
    }
}